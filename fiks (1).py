# -*- coding: utf-8 -*-
"""FIKS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLAiWA1AxYmNKmAAFjxi7ZR9cTTlcVy1

#Load Data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

file_id = "15a0fuI2U8WXwh7a93hd4bfEsOiH91XAW"
url = f"https://drive.google.com/uc?id={file_id}"

df = pd.read_csv(url)

"""# Clean Data"""

# Menghapus fitur
df = df.drop(columns=['Evaporation', 'Sunshine', 'Cloud9am', 'Cloud3pm'])

# Isi dengan median/modus
numerical_cols = ['MinTemp', 'MaxTemp', 'Rainfall', 'WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm',
                   'Humidity9am', 'Humidity3pm', 'Pressure9am', 'Pressure3pm', 'Temp9am', 'Temp3pm']
categorical_cols = ['WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow']

# Imputasi untuk kolom numerik
for col in numerical_cols:
    df[col] = df[col].fillna(df[col].median())

# Imputasi untuk kolom kategorikal
for col in categorical_cols:
    df[col] = df[col].fillna(df[col].mode()[0])

"""# Encoding"""

for col in df.select_dtypes(include=['object', 'category']).columns:
    print(f"{col}: {df[col].nunique()} kategori")

for col in df.select_dtypes(include=['object', 'category']).columns:
    print(f"Kategori di kolom '{col}': {df[col].unique()}")

#Ubah ke Format Datetime
df["Date"] = pd.to_datetime(df["Date"])

#ekstrak Fitur Penting (Tahun, Bulan, Hari, Hari dalam seminggu)
df["Year"] = df["Date"].dt.year
df["Month"] = df["Date"].dt.month
df["Day"] = df["Date"].dt.day
df["DayOfWeek"] = df["Date"].dt.dayofweek  # Senin (0) - Minggu (6)

#Hapus kolom date
df.drop(columns=["Date"], inplace=True)

df["RainToday"] = df["RainToday"].map({"No": 0, "Yes": 1})
df["RainTomorrow"] = df["RainTomorrow"].map({"No": 0, "Yes": 1})

# Mapping arah angin ke derajat
wind_direction_map = {
    "N": 0, "NNE": 22.5, "NE": 45, "ENE": 67.5,
    "E": 90, "ESE": 112.5, "SE": 135, "SSE": 157.5,
    "S": 180, "SSW": 202.5, "SW": 225, "WSW": 247.5,
    "W": 270, "WNW": 292.5, "NW": 315, "NNW": 337.5
}

# Fungsi encoding siklis
def encode_cyclic_feature(df, column):
    df[column + "_deg"] = df[column].map(wind_direction_map)  # Konversi ke derajat
    df[column + "_sin"] = np.sin(np.deg2rad(df[column + "_deg"]))
    df[column + "_cos"] = np.cos(np.deg2rad(df[column + "_deg"]))
    df.drop(columns=[column, column + "_deg"], inplace=True)  # Hapus kolom asli
    return df

# Terapkan encoding ke semua kolom arah angin
for col in ["WindGustDir", "WindDir9am", "WindDir3pm"]:
    df = encode_cyclic_feature(df, col)

df = pd.get_dummies(df, columns=['Location'], drop_first=True)
df.dropna(inplace=True)

df.info()

df

"""#PREDIKSI CUACA"""

import time
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

# 5. Pisahkan fitur dan target
X = df.drop(columns='RainTomorrow')
y = df['RainTomorrow']

# 6. Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 7. Standarisasi
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 8. Latih model klasifikasi dan ukur waktu training
start_train = time.time()
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)
end_train = time.time()

# 9. Prediksi dan ukur waktu prediksi
start_pred = time.time()
y_pred = model.predict(X_test_scaled)
end_pred = time.time()

# 10. Evaluasi
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print(f"Accuracy Score: {accuracy_score(y_test, y_pred):.2f}")

# 11. Tampilkan waktu
print(f"\nTraining Time: {end_train - start_train:.4f} seconds")
print(f"Prediction Time: {end_pred - start_pred:.4f} seconds")

# 12. Simpan model dan scaler
joblib.dump(model, 'rain_tomorrow_rf_model.pkl')
joblib.dump(scaler, 'scaler.pkl')

"""Ukuran Model"""

import os

# Hitung ukuran file model
model_path = 'rain_tomorrow_rf_model.pkl'
scaler_path = 'scaler.pkl'

model_size = os.path.getsize(model_path) / (1024 * 1024)  # dalam MB
scaler_size = os.path.getsize(scaler_path) / (1024 * 1024)  # dalam MB

print(f"Ukuran model: {model_size:.2f} MB")
print(f"Ukuran scaler: {scaler_size:.2f} MB")

"""Ukuran memory"""

pip install pympler

from pympler import asizeof

# Hitung ukuran objek model dan scaler di memori (RAM)
model_memory = asizeof.asizeof(model) / (1024 * 1024)  # dalam MB
scaler_memory = asizeof.asizeof(scaler) / (1024 * 1024)  # dalam MB

print(f"Ukuran model di RAM: {model_memory:.2f} MB")
print(f"Ukuran scaler di RAM: {scaler_memory:.2f} MB")

"""# PREDIKSI SUHU

Linear Regression
"""

import time
import joblib
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Catat waktu mulai
start_time = time.time()

# Model Linear Regression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Catat waktu selesai
end_time = time.time()

# Prediksi
y_pred_linear = linear_model.predict(X_test)

# Evaluasi
mae_linear = mean_absolute_error(y_test, y_pred_linear)
rmse_linear = np.sqrt(mean_squared_error(y_test, y_pred_linear))
r2_linear = r2_score(y_test, y_pred_linear)

# Menghitung waktu yang dibutuhkan
elapsed_time = end_time - start_time

print(f"MAE: {mae_linear:.2f} °C")
print(f"RMSE: {rmse_linear:.2f} °C")
print(f"R²: {r2_linear:.2f}")
print(f"Waktu running: {elapsed_time:.2f} detik")

# Simpan model
joblib.dump(linear_model, 'model_suhu.pkl')

"""Ukuran Model"""

import joblib

# Simpan model ke file
joblib.dump(linear_model, 'linear_regression_model.pkl')

# Cek ukuran model
import os
model_size = os.path.getsize('linear_regression_model.pkl')
print(f"Ukuran model: {model_size / (1024 ** 2):.2f} MB")  # dalam MB

"""Ukuran Memori"""

import psutil

# Fungsi untuk memonitor penggunaan memori
def memory_usage():
    process = psutil.Process()
    mem_info = process.memory_info()
    return mem_info.rss / (1024 ** 2)  # dalam MB

# Sebelum melatih model
mem_before = memory_usage()
print(f"Memori sebelum pelatihan: {mem_before:.2f} MB")

# Melatih model Linear Regression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Setelah melatih model
mem_after = memory_usage()
print(f"Memori setelah pelatihan: {mem_after:.2f} MB")

# Penggunaan memori selama pelatihan
print(f"Penggunaan memori selama pelatihan: {mem_after - mem_before:.2f} MB")

"""#PREDIKSI KELEMBABAN"""

# Memisahkan fitur dan target
X = df.drop(columns=['Humidity3pm', 'RainTomorrow'])  # target: 'Humidity3pm', bisa disesuaikan jika perlu
y = df['Humidity3pm']

# Membagi data menjadi train dan test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

start_time = time.time()

# Melatih model Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Waktu yang dibutuhkan untuk melatih model
end_time = time.time()
elapsed_time = end_time - start_time

# Membuat prediksi
y_pred = model.predict(X_test)

 # Menghitung metrik evaluasi
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)  # Hitung RMSE manual
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae:.2f} %")
print(f"RMSE: {rmse:.2f} %")
print(f"R²: {r2:.2f}")
print(f"Waktu running: {elapsed_time:.2f} detik")

# Simpan model
joblib.dump(model, 'model_humidity.pkl')

"""Ukuran Model"""

import joblib

# Simpan model ke file
joblib.dump(model, 'linear_regression_model.pkl')

# Cek ukuran model
import os
model_size = os.path.getsize('linear_regression_model.pkl')
print(f"Ukuran model: {model_size / (1024 ** 2):.2f} MB")  # dalam MB

"""Ukuran Memory"""

import psutil

# Fungsi untuk memonitor penggunaan memori
def memory_usage():
    process = psutil.Process()
    mem_info = process.memory_info()
    return mem_info.rss / (1024 ** 2)  # dalam MB

# Sebelum melatih model
mem_before = memory_usage()
print(f"Memori sebelum pelatihan: {mem_before:.2f} MB")

# Melatih model Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Setelah melatih model
mem_after = memory_usage()
print(f"Memori setelah pelatihan: {mem_after:.2f} MB")

# Penggunaan memori selama pelatihan
print(f"Penggunaan memori selama pelatihan: {mem_after - mem_before:.2f} MB")

"""#PREDIKSI TEKANAN UDARA"""

# Memisahkan fitur dan target
X = df.drop(columns=['Pressure3pm'])  # target: 'Humidity3pm', bisa disesuaikan jika perlu
y = df['Pressure3pm']

# Membagi data menjadi train dan test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

start_time = time.time()

# Melatih model Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Waktu yang dibutuhkan untuk melatih model
end_time = time.time()
elapsed_time = end_time - start_time

# Membuat prediksi
y_pred = model.predict(X_test)

 # Menghitung metrik evaluasi
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)  # Hitung RMSE manual
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae:.2f} hPa")
print(f"RMSE: {rmse:.2f} hPa")
print(f"R²: {r2:.2f}")
print(f"Waktu running: {elapsed_time:.2f} detik")

# Simpan model
joblib.dump(model, 'model_Pressure3pm.pkl')

"""Ukuran Model"""

import joblib

# Simpan model ke file
joblib.dump(model, 'linear_regression_model.pkl')

# Cek ukuran model
import os
model_size = os.path.getsize('linear_regression_model.pkl')
print(f"Ukuran model: {model_size / (1024 ** 2):.2f} MB")  # dalam MB

"""Ukuran Memori"""

import psutil

# Fungsi untuk memonitor penggunaan memori
def memory_usage():
    process = psutil.Process()
    mem_info = process.memory_info()
    return mem_info.rss / (1024 ** 2)  # dalam MB

# Sebelum melatih model
mem_before = memory_usage()
print(f"Memori sebelum pelatihan: {mem_before:.2f} MB")

# Melatih model Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Setelah melatih model
mem_after = memory_usage()
print(f"Memori setelah pelatihan: {mem_after:.2f} MB")

# Penggunaan memori selama pelatihan
print(f"Penggunaan memori selama pelatihan: {mem_after - mem_before:.2f} MB")

"""#VISUALISASI"""

# Buat kolom datetime
df['Date'] = pd.to_datetime(df[['Year', 'Month', 'Day']])

# Atur tanggal sebagai index
df.set_index('Date', inplace=True)

# Visualisasi Suhu
plt.figure(figsize=(15, 4))
sns.lineplot(data=df['Temp3pm'], color='orange')
plt.title('Tren Suhu per Hari (3PM)')
plt.xlabel('Tanggal')
plt.ylabel('Suhu (°C)')
plt.grid(True)
plt.tight_layout()
plt.show()

# Visualisasi Kelembaban
plt.figure(figsize=(15, 4))
sns.lineplot(data=df['Humidity3pm'], color='blue')
plt.title('Tren Kelembaban per Hari (3PM)')
plt.xlabel('Tanggal')
plt.ylabel('Kelembaban (%)')
plt.grid(True)
plt.tight_layout()
plt.show()

# Visualisasi Tekanan Udara
plt.figure(figsize=(15, 4))
sns.lineplot(data=df['Pressure3pm'], color='green')
plt.title('Tren Tekanan Udara per Hari (3PM)')
plt.xlabel('Tanggal')
plt.ylabel('Tekanan Udara (hPa)')
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Asumsikan data sudah di-load ke dalam DataFrame bernama `df`
# Dan sudah ada kolom waktu seperti 'Year', 'Month', 'Day'

# Buat kolom datetime
df['Date'] = pd.to_datetime(df[['Year', 'Month', 'Day']])

# Atur tanggal sebagai index
df.set_index('Date', inplace=True)

# Pilih kolom yang akan divisualisasikan
data_to_plot = df[['Temp3pm', 'Humidity3pm', 'Pressure3pm']]

# Plot
plt.figure(figsize=(15, 6))
sns.lineplot(data=data_to_plot, palette="Set2")
plt.title('Tren Suhu, Kelembaban, dan Tekanan Udara per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Nilai')
plt.legend(labels=['Suhu (°C)', 'Kelembaban (%)', 'Tekanan Udara (hPa)'])
plt.grid(True)
plt.tight_layout()
plt.show()